#!/bin/bash
# ref: https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/
#
# Usage example: /bin/sh ./git_push.sh wing328 openapi-petstore-perl "minor update" "gitlab.com"

git_user_id=$1
git_repo_id=$2
release_note=$3
git_host=$4

if [ "$git_host" = "" ]; then
    git_host="{{{gitHost}}}"
    echo "[INFO] No command line input provided. Set \$git_host to $git_host"
fi

if [ "$git_user_id" = "" ]; then
    git_user_id="{{{gitUserId}}}"
    echo "[INFO] No command line input provided. Set \$git_user_id to $git_user_id"
fi

if [ "$git_repo_id" = "" ]; then
    git_repo_id="{{{gitRepoId}}}"
    echo "[INFO] No command line input provided. Set \$git_repo_id to $git_repo_id"
fi

if [ "$release_note" = "" ]; then
    release_note="{{{releaseNote}}}"
    echo "[INFO] No command line input provided. Set \$release_note to $release_note"
fi

# Initialize the local directory as a Git repository
git init -b master

# Adds the files in the local repository and stages them for commit.
git add .

# Commits the tracked changes and prepares them to be pushed to a remote repository.
git commit -m "$release_note"

gh_repo_name=$(gh repo list "${git_user_id}" --json name --visibility public --jq '.[].name | select(. == "${git_repo_id}")' 2>/dev/null || echo "gh not installed")

if [ "$gh_repo_name" = "" ]; then # gh cmd installed and git repository does not exist
  gh auth login --with-token <<< "$GITHUB_TOKEN"
  echo "Creating and pushing to https://${git_host}/${git_user_id}/${git_repo_id}.git"
  gh repo create "${git_repo_id}" -d "{{{artifactDescription}}}" --disable-wiki --public --push --source=.
else 
  if [ "$gh_repo_name" = "gh not installed" ]; then
    echo "[INFO] gh is not installed"
    exit 1
  fi
fi

git pull origin master

# Pushes (Forces) the changes in the local repository up to the remote repository
echo "Git pushing to https://${git_host}/${git_user_id}/${git_repo_id}.git"
git push -u origin master 2>&1 | grep -v 'To https'
